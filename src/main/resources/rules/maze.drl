package com.boruta

import com.boruta.backwardchaining.agent.command.ChooseTargetCommand;
import com.boruta.backwardchaining.agent.command.MakeMoveCommand;
import com.boruta.backwardchaining.agent.structure.Agent;
import com.boruta.backwardchaining.agent.structure.Energy;
import com.boruta.backwardchaining.enemy.command.KillEnemyCommand;
import com.boruta.backwardchaining.maze.helper.NeighborsHelper;
import com.boruta.backwardchaining.maze.structure.Maze;
import com.boruta.backwardchaining.maze.structure.Path;
import com.boruta.backwardchaining.navigation.helper.KnownPositionsHelper;
import com.boruta.backwardchaining.navigation.helper.OppositeDirectionHelper;
import com.boruta.backwardchaining.navigation.helper.PathsFromTargetHelper;
import com.boruta.backwardchaining.navigation.structure.Position;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

// choose next agent target
rule "select enemy target" salience 3
    when
        $maze : Maze();
        $agent : Agent(!isFinished(), !isTargetChoosed());
    then
        ChooseTargetCommand chooseTargetCommand = new ChooseTargetCommand($maze, $agent);
        if(!chooseTargetCommand.execute()) {
            $agent.setFinished(true);
        }
        update($agent);
end

// build paths from target to current position
rule "build paths" salience 2
    when
        $maze : Maze();
        $agent : Agent(!isFinished(), isTargetChoosed());
    then
        List<Path> result = PathsFromTargetHelper.getPaths($maze, $agent);

        for(Path path : result) {
            insert(path);
        }
end

// make move (and execute all associated actions)
rule "make move" salience 1
    when
        $maze : Maze();
        $agent : Agent(!isFinished(), isTargetChoosed(), $target : getTarget(), $position : getCurrentPosition());
        getPathStart($target, $position, pathStart;)
        $paths : ArrayList(size > 0) from collect (Path())
    then
        // remove all known paths (will be recreated in "build paths" step)
        for (int i = 0; i < $paths.size(); i++) {
           retract((Path)$paths.get(i));
        }

        // make move
        MakeMoveCommand makeMoveCommand = new MakeMoveCommand($maze, $agent, $position.getDirection(pathStart.getPathTo()));
        makeMoveCommand.execute();

        update($agent);
        update($maze);
end


query isPath(Position pathTo, Position pathFrom)
    Path(pathTo, pathFrom;)
    or
    (Path(between, pathFrom;) and isPath(pathTo, between;))
end

query getPathStart(Position pathTo, Position pathFrom, Path pathStart)
    pathStart := Path(pathTo, pathFrom;)
    or
    (pathStart := Path(between, pathFrom;) and isPath(pathTo, between;))
end
